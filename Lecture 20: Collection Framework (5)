0.Map: Key와 Value로 이루어진 자료형이다. 
Set에서 HashSet과 TreeSet이 있었던 것처럼 Map에도 HashMap과 TreeMap이 있다. 또한 HashTable이 있는데, HashMap과 유사하지만 HashTable은 
Synchronized class(multithread programming에서 하나의 thread가 해당 class에 접근할 수 있다. ) 이지만, HashMap은 asynchronous 이다. 

1. HashMap:
 - HashMap은 array of Nodes를 가진다. Node는 unique한 key와 duplicates가 가능한 value로 이루어져 있다. 
 - Methods
   1) Constructor: HashSet과 유사하다. 
   2) get/put/remove이 있다. 
   
2. HashMap: Example 1
  - map.put("asdf",1111); map.put("asdf",1234); 이렇게 되면 Error가 발생하는 것이 아니라 value가 overwrite한다. 즉 동일한 key가 들어올때, 
  Error가 발생하는 것이 아니라 overwrite를 방지한다. 

3. HashMap: Example 2
  -Set<Map.Entry<String, Integer>> set= map.entrySet(); 여기서 사용된 method는 static method 1개: Map.Entry 그리고 instance method 1개
  map.entrySet()이 사용되었다. 좌변을 생각해보면 set은 Map.Entry<String, Integer>타입을 저장하는 Set이다.{<"asdf", 1111>, <"aaaa",1234>}
  이렇게 저장되어있다. map.entrySet()은 Key와 Value를 전체 출력해주는 함수이다. 이렇게 해서 Map의 전체 원소에 접근할 수 있다. 
  
  Set으로 바꾸지 않고 전체 원소를 접근하기는 어렵다. 왜냐하면 Map의 value에 접근하기 위해서는 Key가 필요한데 모든 Key를 대입하기 어렵기 때문
  이다. 따라서 전체 원소를 접근하는 방법으로는 Set으로 바꿔서 접근한다.   

4. HashMap: Example 3
  - HashMap이 HashMap의 Key나 Value가 될수 있다. 수행 과정을 살펴보면, 제일 처음에 addGroup를 호출하여 phoneBook에 groupName를 추가한다. 
  만약 존재하는 groupName이란면 아무것도 수행하지 않는다. phoneBook.get(groupName)를 하여 해당 groupName의 value에 해당하는 HashMap이 group
  이 가리키게 한다. 여기에서 group.put하면 해당 HashMap에 key와 value가 추가된다. 따라서 groupName에 HashMap이 추가되는 것이 된다. 
  여기서 <tel,name>인 이유는 name은 중복될 수 있어서 key로 사용할 수 없고 tel은 unique하기 때문에 tel를 key로 사용한다. 
  
  이를 print하기 위해선 모든 원소에 접근해야 하므로 배웠던 Map.Entry와 map.entrySet를 사용한다. 이렇게 해서 출력하면 phoneBook모두를 출력한다.
  
5. HashMap: Example 4
  - HashMap를 이용해서 character의 개수를 센다.  

6. HashMap: Hashing
  - HashFunction을 이용해서 key가 주어지면 해당하는 hashCode가 나오고 이 hashCode를 통해서 value를 찾는다. 
  - on hashing Performance: Search Performance를 위해선, 하나의 slot에 하나의 data가 존재하는 것이 좋다. 
  - 중요한 점은, hashing을 이용하는 모든 collection들은 hashCode()를 hash function으로 사용한다. 따라서 만약에 HashMap<Employee>와 같이 
  선언하면 만약에 hashCode()를 override하지 않는다면 Object의 hashCode()를 사용하지만, override할시 해당하는 hashCode()를 사용한다. 
  여기에서 이전에 다룬것 같은데 만약에 equals와 hashCode 둘중 하나만 수정한다면 이상한 결과가 나타났을 수 있다. 예로들면, hashCode는 다른데, 
  equals는 true를 return하는 일이 발생할 수 있다.   

7. TreeMap: 
  - Data를 저장하기 위해서 tree structure 를 사용한다. 
  - TreeMap이 가장 큰 특징은 새로운 원소가 추가될때, key를 기준으로 sort한다. 따라서 만약에 Comparable이 구현되어있지 않는다면 에러가 발생한다. 

8. ThreeMap: Methods
  - higherEntry: 해당 key보다 큰 하나의 key의 Map를 return한다. 
  - headMap(key): key보다 작은 key들의 Map를 return한다. 
  
<Programming Lab #1>
  - 중요한 점은 key가 중복되면 이전 value를 지우고 새로운 value로 대체한다. 

<Programming Lab #2>
  - 중요한 점은 Map에서 모든 원소를 접근할때는 Set<Map.Entry<>>와 map.entrySet()를 사용하여야 한다. 
  - 또한 key만 접근하고 싶을때는 Set<>와 map.keySet()를 사용하여야 한다. 
  
<Programming Lab #3>
  - 앞에서 언급한 Example이다. 여기서 만약에 tel 이 key가 아니라 name이 key라면 어떻게 될까? 중복되는 원소가 삭제된다. 따라서 총 개수가 다른 것을 볼 수 있다. 
  
<Programming Lab #4>
  - TreeMap이므로 key에 의한 정렬이 이루어진다. 따라서 A->D->K->Z 순으로 출력된다. 하지만 이를 HashMap으로 바꾸면 A->D->Z->K 순으로 출력된다. 즉, sort하지 
  않는다. 
  - 그다음 꺼는 Map->Set->List로 바꾸어서 ValueComparator를 정의하여 이를 이용하여 value를 순으로 출력하게 한다. 

