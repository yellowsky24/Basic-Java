1. HashSet
  - 동일한 원소가 Set안에 있을 수 없다. (DUplicates not Allowed)
  - Null Element가 존재
  - Ordering이 필요 없다. 

2. HashSet: Methods
  - initial Capacity: 초기 사이즈/ Load factor: load factor가 0.75이면 capacity의 0.75퍼센트가 차면 capacity가 double된다. 너무 작아도 안되고 너무 커도 안된다. 따라서 0.75가
  적당하다. 
  - 1) Constructor: 인자가 없으면 capacity: 16, Load Factor: 0.75이고 인자가 두개가 있으면 initial capacity와 load factor를 초기화 시켜준다. 
  - 2) add / remove / contains/ isEmpty/ iterator
  
3. HashSet: Example 1
  - 여기에서 주목할 점은 두가지이다. 
    1) Duplicate Elements는 허용되지 않는다.
    2) 원소의 order은 정해져 있지 않다.
    
    
4. HashSet: Example 3
  - 과정을 살펴보면, 이전 Example과 같이 중복을 제거하기 위해서 set에 추가하는데 여기서는 String Set이므로 +""을 함으로써 int를 string으로 만든다. 그다음엔 ITerator를 사용하여 
    .next()를 호출하고 parseInt를 사용하여 string을 int로 만들고 이를 출력한다. 
   
  - 하지만 결과를 보면 한자리 숫자가 첫줄에 나오지 않는다. . 왜냐하면, 비록 sort할 수 없고 element간의 order은 없지만, Java가 elements를 자신만의 방법을 사용해서 order를 해준다. 
  따라서 HashSet를 사용하면 order가 truely random하지는 않고 Java가 자신의 방법을 사용해서 order하므로 숫자의 위치가 유사하게 나타난다. 만약 pure random을 사용하고 싶다면, 
  LinkedHashSet를 사용하면 Java가 order하지 않는다. 
  
5. HashSet: Example 4
  - 두 elements가 동일한 name과 age를 갖고있지만 둘은 duplicates로 취급되지 않는다. 왜냐하면 duplicate는 equals와 hashCode를 이용하여 판단되기 때문이다. 
  따라서 이를 Overriding 해야 한다. Example 5에서 이를 구현하였다. 
  
6. HashSet: hashCode: hashFunciton을 구현하기 위해서 hashCode를 override를 해야 하는데, 이럴 경우 다음과 같은 rules를 따라야 한다. 
  - 1) 하나의 프로그램 실행 안에서, 동일한 object에 대해선 동일한 hashCode를 return해야 한다. 
  - 2) equals가 true라면 hashCode가 일치해야 한다. 
  - 3) equals가 false라면 hashCode가 불일치하는 것이 좋지만 hashCode가 일치해도 논리적으로는 괜찮지만, peformance degradation이 발생한다. (왜냐하면 모든 object가 다른 hashCode
  를 가지는 것이 불가능하기 때문이다.)
  
7. TreeSet: HashSet과 다른점은 data를 저장하는 방법이 다르다. HashSet는 hashFunciton을 이용하여 데이터를 저장한다. 
  - Binary Search Tree를 이용하여 데이터를 저장한다. 
    - 각 Node는 최대 두개의 child Node를 가진다. (Binary Tree)
    - Left Node는 parent보다 작고 Right Node Parent보다 크다. (Search Tree)
  - Duplicates를 허용하지 않는다. 
  - elements가 이미 sorted 되어있기 때문에 input의 order를 저장하지 않는다. (Hashset과는 다르다.)
  - 따라서 Sorting, Searching, Range Search에 유리하다. 
  
8. TreeSet: Methods
  - 1) Constructor: Treeset에서는 반드시 Comparator가 존재해야 한다. 왜냐하면 원소를 삽입할때 Comparator을 이용해서 삽입하기 때문이다. 따라서 default constructor을 호출
  하는 것이 있을시에는, ordering이 이미 정해진 원소들만 가능하다. ex) Integer, float...
    2) headset, subset, tailset
    
9. TreeSet: Example 1
  - 여기서 중요한 점은 element를 정렬하지 않아도 된다. 따라서 HashSet에선 정렬하기 위해선 List를 사용하였는데 TreeSet은 이미 정렬되었으므로 그렇지 않아도 된다. 
10. TreeSet: Example 2
  - string또한 range search가 가능핟. 여기서는 b와 d사이의 string와 b와 dzzz사이의 string을 출력할 수 있다.
 
<Programming Lab#19-01>
 결과가 임의의 순서로 나와야 하는데, [1, 2, 3, 4]가 출력된다. 하지만 각각 1000,2000,3000,4000으로 바꾸면 order가 없다.
 
<Programming Lab#19-02>
 결과를 통해서 HashSet가 순서가 없는 것을 볼 수 있다. 하지만 HashSet대신 TreeSet을 쓰면 바로 정렬이 되는 것을 볼 수 있다. 
 
<Programming Lab#19-03>
결과를 보면 일의 자리 숫자가 거의 첫줄에 오지 않는 것을 알 수 있다. 이는 자바가 order가 없는 hashSet에 자신의 ordering을 사용하여 order를 하고 있는 것이다. 따라서 
truly random을 구현하기 위해선 LinkedHashSet을 사용한다. 

<Programming Lab#19-04>
결과를 보면 두개의 Object가 중복해서 삽입되는 것을 알 수 있다. 따라서 두개의 object를 같다는를 나타내기 위해선 equals와 hashCode를 구현해야 한다. equals는 이름과 age가 같다면
동일한 object라고 생각하고 hashcode는 string.hashCode()를 이용하여 age를 string으로 바꿔 name+age의 string.hashCode를 리턴한다. 
여기서 만약에 hashCode와 equals중 하나만 구현되어있다면 어떻게 될까???
  1. hashCode만 구현. 둘을 구분하지 못한다. 
  2. equals만 구현. 둘을 구분하지 못한다. 왜냐하면 둘이 다른 hashCode를 가지게 될텐데 hashSet에선 hashCode가 동일한 duplicates를 제거한다. 따라서 다른 hashCOde를 가지므로
  hashSet에선 둘을 duplicates라고 생각하지 못한다. 
  
여기서 또 만약에 TreeSet를 사용했다면 어떻게 될까?? -> 에러가 발생한다. 왜냐하면 Person에 Comparator가 구현되어있지 않기 때문이다. 

<Programming Lab#19-05>
Range Search를 하기 위해서 subSet를 사용한다. subSet의 첫번째 parameter에는 from, 두번째 parameter에는 to가 들어간다. from과 to사이의 모든 원소를 출력한다. 

<Programming Lab#19-06>
Range Search를 위한 또다른 두가지 함수가 있다. 
 1)headSet: parameter원소보다 작은 원소를 출력한다. 
 2)tailSet: parameter원소보다 크거나 같은 원소를 출력한다. 


  
