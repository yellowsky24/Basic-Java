1. Iterator
  -Iterator은 Collection으로 부터 Data를 읽는 방법이다. 
2. Iterator Methods
  1) hasNext(): next()를 호출하기 전에 다음 element가 존재하는지를 체크하는 method이다. element가 더 있으면 true를 return한다. 
  2) next(): element를 가리키는 포인터를 다음 element로 이동시키고 해당 element를 return한다.
  3) remove(): iteartor에서 return 된 마지막 element를 제거한다. 
  
-> Typical use of Iterator
  while(it.hasNext()) 
    System.out.println(it.next()); ->즉 next가 element를 가리키는 포인터를 다음 element로 이동시키고 해당 element를 return한다. 

3. List Iterator: 기존의 Iterator에 additional methods를 추가하여 list를 forward, backward 할 수 있다. 그리고 ArrayList, Linked List에서 사용할 수 있다. 

4. Arrays: Array를 위한 static method를 제공한다. 
  1) copyOf: First Argument: source array | Second Argument: 복사할 길이 | Return: Destination Array 중요한 점이 만약에 source array의 길이보다 길면 0으로 채운다. 
  int[] arr={ 0, 1, 2, 3, 4};
  int[] arr2= Arrays.copyOf(arr, arr.length); arr2 is [0,1,2,3,4];
  int[] arr3= Arrays.copyOf(arr, 3); arr3 is [0,1,2];
  int[] arr4= Arrays.copyOf(arr, 7); arr4 is [0,1,2,3,4,0,0];
  
  2) copyOfRange(): Second Argument: start Index | Third Argument: End Index -> 근데 여기서 너무 중요한 점이, 마지막 인덱스를 포함하지 않는다. 즉 4이면 3까지만 복사한다. 
  int[] arr5= Arrays.copyOfRange(arr, 2, 4); arr5 is [2,3];
  int[] arr6= Arrays.copyOfRange(arr, 0, 7); arr6 is [0,1,2,3,4,0,0];
  
  3) fill: elements를 동일한 value로 채운다. First Argument: fill할 Arguement | Second Argument: fill 할 value | Return: void
  
  4) setAll(): First Argument: set할 Array | Second Argument: Generator function
     cf) Lambda expression: (parameter)->(return value) ex) ()-> (int)(Math.random()*5+1) parameter은 없고 return 값은 1이상 6미만의 자연수이다. 
     
     Arrays.setAll(arr, (int)(Math.random()*5)+1);
   
  5) Sort: 오름차순으로 정렬한다. 
  
  6) binarySearch(): 정렬된 arrayd에서 이분 탐색을 실시한다. Second Argument: 찾고 싶은 value;
  
  int[] arr={3,2,0,1,4};
  int idx= Arrays.binarySearch(arr,2); ->idx=-5(wrong result)
  
  Arrays.sort(arr);
  System.out.println(Arrays.toString(arr)); [0,1,2,3,4];
  int idx= Arrays.binarySearch(arr,2) iex=2(correct result);
  
  7) toString(): 모든 elements을 string에 저장한다. 하지만, toString은 argument는 1차원 배열로 간주하기에 다차원 배열을 사용하면 안된다. 
     deepToString(): 다차원 배열의 경우 해당 함수를 사용한다. 
    
     int [][] arr2D = {{11,12,13}, {21,22,23}};
     System.out.println(Arrays.deepToString(arr2D)) -> [[11,12,13], [21,22,23]] 이렇게 나온다.
     
  8) equals: 일차원 배열 두개가 동일한지 체크해준다. 
     deepEquals(): 다차원 배열 두개가 동일한지 체크해준다. 

5. Comparable and Comparator
  -만약에 elements가 primitive type인 int 나 float처럼 대소비교를 어떻게 하는 것인지 알 수 있다. 하지만 primitive type이 아니고 objects라면, 어떻게 대소비교(compare)하는지를 모른다. 
  따라서 sort하기 위해서 comparable이 정의되어야 한다. 

  - Example: class Integer
      public final class Integer extends Number implements Comparable<Integer>{
        public int compareTo(Integer another Integer)
      }
    ->-1: less, 0: equal, 1: more
    따라서 Comparable을 구현하기 위해서 compareTo를 구현해야 한다. 

6. Comparable Example
  - class Employee implements Comparable<Employee>
    public int compareTo(Employee e){}
    ->이렇게 Comparable의 compareTO를 구현해야 한다. 
    
7. Comparator: Comparable은 정렬 수행시 기본적으로 적용되는 정렬이고 Comparable을 구현한 클래스에 대해서 Comparator은 기본 정렬과 다른 기준으로 정렬하고 싶을때 사용한다. 주로 내림차순으로 
정렬하고 싶을때 많이 사용한다. 

class Descending<T> implements Comparator<T>{
  public int compareTo(T o1, T o2){
    if(o1 instanceof Comparable && o2 instanceof Comparable){ //Comparator을 구현하기 이해서 Comparable을 먼저 구현해야 한다. 
       Comparable c1= (Comparable)o1;
       Comparable c2= (Comparable)o2;
       return c1.compareTo(c2)*-1;//기존의 순서과는 반대로 구현한다. 
    }
    return -1;
}
Arrays.sort(arr, new Descending());//Descending 으로 정렬된다.  

8. CASE_INSENSITIVE_ORDER: String의 한가지 Comparator을 구현한 class이며 대문자와 소문자를 체크하지 않고 무조건 알파벳을 ascending 으로 정렬한다. 

Programming Lab#1: iterator은 hasNext와 next를 가지고 있고 ListIterator은 hasPrevious와 previous를 가지고 있다.
Programming Lab#2: Arrays.toString()은 일차원 배열에만 해당하고 Arrays.deepToString()은 다차원 배열에 해당한다. fill과 set이 어떻게 되는지 알아야하고 bar graph가 어떤 모습인지 알아야
한다. 또한 다차원 배열의 일치를 확인 하는 것은 equals가 아니라 deepEquals로 확인한다. 또한 binary search를 하기 전에는 반드시 sorting을 해야 한다. 
Programming Lab#3: Comparable에서 Ascending으로 정렬하고 싶다면 자신이 크면 -1 자신이 작으면 1를 리턴 해야한다.
Programming Lab#4: Comparator은 당연히 Comparable이 구현되어야 하고 인자에서 new를 해야 동작한다. 또한 CASE_INSENSITIVE_ORDER를 사용하면 대문자와 소문자를 구별하지 않고 무조건 알파벳
순서로 정렬한다. 
     
  
     
     
